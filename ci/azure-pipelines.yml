jobs:
  - job: ubuntu20_gcc9
    pool:
      vmImage: 'ubuntu-20.04'
    strategy:
      matrix:
        Release:
          CMakePreset: gcc-release
        AddressSanitizer:
          CMakePreset: gcc-asan
        UndefinedBehaviourSanitizer:
          CMakePreset: gcc-ubsan
    steps:
      - script: |
          which g++ && g++ --version
          cmake --version
        displayName: 'Check environment'
      - template: templates/install-boost.yml
      - script: |
          sudo apt-get install ninja-build
        displayName: 'Install Ninja'
      - script: |
          cmake --preset=$(CMakePreset) -DCMAKE_PREFIX_PATH=_deps/boost_1_77_0
          cmake --build build/$(CMakePreset)
        displayName: 'Build kl'
      - script: |
          cd build/$(CMakePreset) && ctest -VV --output-on-failure
        displayName: 'Run CTest'

  - job: ubuntu20_gcc9_coverage
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
      - script: |
          which g++ && g++ --version
          cmake --version
        displayName: 'Check environment'
      - script: |
          pip install --user codecov
        displayName: 'Install codecov'
      - template: templates/install-boost.yml
      - script: |
          sudo apt-get install ninja-build
        displayName: 'Install Ninja'
      - template: templates/install-lcov.yml
      - script: |
          export PATH=$(pwd)/_deps/lcov/bin:$PATH
          cmake --preset=gcc-coverage -DCMAKE_PREFIX_PATH=_deps/boost_1_77_0
          cmake --build build/gcc-coverage
        displayName: 'Build kl'
      - script: |
          set -e
          cd build/gcc-coverage && cmake --build . --target kl-coverage
          ~/.local/bin/codecov -X gcov
        displayName: 'Send code coverage data'

  - job: ubuntu20_clang10
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
      - template: templates/install-clang.yml
        parameters:
          version: '10'
      - script: |
          which clang++ && clang++ --version
          cmake --version
        displayName: 'Check environment'
      - template: templates/install-boost.yml
      - script: |
          sudo apt-get install ninja-build
        displayName: 'Install Ninja'
      - script: |
          cmake --preset=clang-release -DCMAKE_PREFIX_PATH=_deps/boost_1_77_0
          cmake --build build/clang-release
        displayName: 'Build kl'
      - script: |
          cd build/clang-release && ctest -VV --output-on-failure
        displayName: 'Run CTest'

  - job: windows_vc2019
    pool:
      vmImage: 'windows-2019'
    variables:
      CL: /MP
    steps:
      - script: |
          cmake --version
        displayName: 'Check environment'
      - template: templates/install-boost.yml
      - script: |
          cmake.exe --preset=vs2019 -DCMAKE_PREFIX_PATH=_deps/boost_1_77_0
          cmake.exe --build build/vs2019 --config Release --parallel
        displayName: 'Build kl'
      - script: |
          cd build/vs2019 && ctest --build-config Release -VV --output-on-failure
        displayName: 'Run CTest'

  - job: windows_vc2022_conan
    pool:
      vmImage: 'windows-2022'
    variables:
      UseMultiToolTask: true
    # Disable for now
    condition: eq(1,2)
    steps:
      - script: |
          pip install conan>=2.0.0
          conan --version
          conan profile detect
        displayName: 'Install conan'
      - script: |
          cmake --version
        displayName: 'Check environment'
      - script: |
          conan create . --build=missing -s build_type=Release -s compiler.cppstd=17 -o build_tests=True
        displayName: 'Build kl package'

